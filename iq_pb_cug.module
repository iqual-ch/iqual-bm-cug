<?php
use Drupal\Core\Url;
use Drupal\user\UserInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use \Drupal\Core\Access\AccessResult;
use \Drupal\node\NodeInterface;

/**
 * Undocumented function
 *
 * @param [type] $node
 * @param [type] $op
 * @param [type] $account
 * @return void
 */
function iq_pb_cug_node_access($node, $op, $account)
{
    if ($op == 'view' && $node->bundle() == 'iqbm_page') {
        $roleField = $node->field_iqcg_extranet;
        if ($roleField->count() > 0) {
            $iterator = $roleField->getIterator();
            $roles = [];
            while ($iterator->valid()) {
                $roles[] = $iterator->current()->target_id;
                $iterator->next();
            }
            $intersection = array_intersect($roles, $account->getRoles());
            if (count($intersection) > 0) {
                return AccessResult::allowed()->cachePerPermissions();
            } else {
                return AccessResult::forbidden()->cachePerPermissions();
            }
        }
    }
    return AccessResult::neutral();
}

/**
 * Undocumented function
 *
 * @param UserInterface $user
 * @return void
 */
function iq_pb_cug_user_login(UserInterface $user)
{
    $isExtranet = false;
    foreach ($user->getRoles() as $role) {
        $roleObj = \Drupal\user\Entity\Role::load($role);
        if (strpos($roleObj->label(), 'Extranet') !== false) {
            $isExtranet = true;
        }
    }
    if ($isExtranet) {
        $current_route = \Drupal::routeMatch()->getRouteName();
        if (!in_array($current_route, ['user.reset', 'user.reset.login'])) {
            $username = $user->getRoles();
            $cug_redirection = \Drupal::config('redirect_cug.settings')
                ->get('cug_redirection');

            if (!empty($cug_redirection[array_reverse($username)[0]])) {
                $response = new RedirectResponse(Url::fromUserInput($cug_redirection[array_reverse($username)[0]])
                        ->toString());
            } else {
                $default_redirection = \Drupal::config('redirect_cug.settings')
                    ->get('default_redirection');
                $response = new RedirectResponse(Url::fromUserInput($default_redirection)->toString());
            }
            $response->send();
        }
    }
}
