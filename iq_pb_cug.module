<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use \Drupal\Core\Access\AccessResult;
use \Drupal\views\ViewExecutable;
use \Drupal\user\Entity\Role;

/**
 * Undocumented function
 *
 * @param [type] $node
 * @param [type] $op
 * @param [type] $account
 * @return void
 */
function iq_pb_cug_node_access($node, $op, $account)
{
    if ($op == 'view' && $node->bundle() == 'iqbm_page') {
        $roleField = $node->field_iqcg_extranet;
        if ($roleField->count() > 0) {
            $iterator = $roleField->getIterator();
            $roles = [];
            while ($iterator->valid()) {
                $roles[] = $iterator->current()->target_id;
                $iterator->next();
            }
            $intersection = array_intersect($roles, $account->getRoles());
            if (count($intersection) > 0) {
                return AccessResult::allowed()->cachePerPermissions();
            } else {
                return AccessResult::forbidden()->cachePerPermissions();
            }
        }
    }
    return AccessResult::neutral();
}

/**
 * Implements hook_user_login().
 *
 * Check if the user is a part of the CUG and redirect accordingly.
 *
 * @param UserInterface $user
 * @return void
 */
function iq_pb_cug_user_login(UserInterface $user)
{
    $isExtranet = false;
    foreach ($user->getRoles() as $role) {
        $roleObj = \Drupal\user\Entity\Role::load($role);
        if ($roleObj->getThirdPartySetting('iq_pb_cug', 'closed_user_group')) {
            $isExtranet = true;
        }
    }
    if ($isExtranet) {
        $current_route = \Drupal::routeMatch()->getRouteName();
        if (!in_array($current_route, ['user.reset', 'user.reset.login'])) {
            $username = $user->getRoles();
            $cug_redirection = \Drupal::config('redirect_cug.settings')
                ->get('cug_redirection');

            if (!empty($cug_redirection[array_reverse($username)[0]])) {
                $response = new RedirectResponse(Url::fromUserInput($cug_redirection[array_reverse($username)[0]])
                        ->toString());
            } else {
                $default_redirection = \Drupal::config('redirect_cug.settings')
                    ->get('default_redirection');
                $response = new RedirectResponse(Url::fromUserInput($default_redirection)->toString());
            }
            $response->send();
        }
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a third party setting to indicate if a role is a part of the CUG.
 */
function iq_pb_cug_form_user_role_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    $entity = $form_state->getFormObject()->getEntity();

    $form['closed_user_group'] = [
        '#type' => 'checkbox',
        '#title' => t('Closed user group role'),
        '#description' => t('Check this box if the role is part of the closed user group.'),
        '#default_value' => $entity->getThirdPartySetting('iq_pb_cug', 'closed_user_group'),
        '#disabled' => $entity->getThirdPartySetting('iq_pb_cug', 'closed_user_group') && !\Drupal::currentUser()->hasPermission('administer users') ? 'disabled' : false,
    ];
    $form['actions']['submit']['#submit'][] = 'iq_pb_cug_form_user_role_form_submit';
}

function iq_pb_cug_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    /** @var User $user */
    if (isset ($_GET['destination']) && strpos($_GET['destination'],'/cug/') > 0) {
        foreach ($form['account']['roles']['#options'] as $role_key => $role_label) {
            if (!Role::load($role_key)->getThirdPartySetting('iq_pb_cug','closed_user_group')) {
                unset($form['account']['roles']['#options'][$role_key]);
                unset($form['account']['roles'][$role_key]);
            }
        }
    }
    $form['actions']['submit']['#submit'][] = 'iq_pb_cug_form_user_form_submit';
}

/**
 * Form submit handler function for the user role form.
 */
function iq_pb_cug_form_user_role_form_submit(&$form, FormStateInterface $form_state) {
    $entity = $form_state->getFormObject()->getEntity();
    $entity->setThirdPartySetting('iq_pb_cug', 'closed_user_group', (bool) $form['closed_user_group']);
    $entity->save();
    // If the role is a part of the CUG, redirect to the CUG roles.
    if($form['closed_user_group']) {
        $form_state->setRedirect('iq_pb_cug.cug_roles');
    }
}

/**
 * Form submit handler function for the user form.
 */
function iq_pb_cug_form_user_form_submit(&$form, FormStateInterface $form_state) {
    /** @var \Drupal\user\Entity\User $entity */
    $entity = $form_state->getFormObject()->getEntity();
    $is_cug_user = false;
    foreach ($entity->getRoles() as $role_key => $role_value) {
        if(Role::load($role_value)->getThirdPartySetting('iq_pb_cug', 'closed_user_group')) {
            $is_cug_user = true;
            break;
        }
    }
    if($is_cug_user) {
        $form_state->setRedirect('iq_pb_cug.settings');
    }

}
/**
 * Implements hook_views_pre_view().
 *
 * Filter the users to show only those who are a part of the CUG.
 */
function iq_pb_cug_views_pre_view(ViewExecutable $view, $display_id, array &$args)
{
    if($view->id() == 'iq_pb_cug_users') {

        // Filter only CUG Users
        $view_filters = $view->getDisplay()->getOption('filters');
        // @todo CUG Functionality
        // Get all CUG roles.
        $roles = \Drupal::entityQuery('user_role')->execute();
        $cug_roles = 0;
        foreach ($roles as $role_key => $role) {
            $user_role = Role::load($role_key);
            if ($user_role->getThirdPartySetting('iq_pb_cug','closed_user_group')) {
                $view_filters['roles_target_id']['value'][$role_key] = $role_key;
                $cug_roles++;
            }
        }
        if ($cug_roles<=0) {
            $view_filters['roles_target_id']['value']['no-cug-roles'] = 'no-cug-roles';
        }
        $view_filters['roles_target_id']['exposed'] = false;
        // Override filters to show only users with CUG roles.
        $view->getDisplay()->overrideOption('filters', $view_filters);
    }
}
